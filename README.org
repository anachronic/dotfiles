* dotfiles

Good ol' dotfiles.

** After cloning this repository

Take any notes about the things you do to make everything work and put
them here

** =xdg= directories

Install =xdg-user-dirs= from =pacman= and run

#+BEGIN_EXAMPLE
    $ xdg-user-dirs-update
#+END_EXAMPLE

** Touchpad

The touchpad physical click seems to have stopped working or, rather,
works badly. To fix that I have decided to train myself to just use tap
to click. For =libinput=, which is what I use, I did this to make it
work

#+BEGIN_EXAMPLE
    $ xinput list
    $ xinput list-props 14  # that's the elantech touchpad
    $ xinput set-prop 14 277 1  # 277 is tapping enabled
#+END_EXAMPLE

That, however, will only last for the session; in order to have it as
the default setting, create the file
=/etc/X11/xorg.conf.d/30-touchpad.conf= and write this:

#+BEGIN_EXAMPLE
    Section "InputClass"
      Identifier "MyTouchpad"
      MatchIsTouchpad "on"
      Driver "libinput"
      Option "Tapping" "on"
    EndSection
#+END_EXAMPLE

That should do it for the tap to click behavior on the laptop.

** Audio

Generally audio is kind of a pain in the ass, especially with an
external audio card (which is the case of my desktop computer). I use
=pulseaudio= with =ALSA=. Works ok when set up correctly.

*** Fix audio on desktop with a sound card (Asus Xonar DGX)

This problem is solved by simply going into =alsamixer= in a shell and
searching for the =Multichannel= keyword in Analog Output. It might
also be necessary to select 5.1 audio + Analog Input in =pavucontrol=.

The config seems to stick around.

*** Unmute

First of all unmute and raise the volume of the master channel. That can
be done with the =alsamixer= tool which comes from the =alsa-utils=
package. The =m= key can be used to unmute a channel. Honestly I don't
remember the way of doing this on my desktop computer, so I'll come back
on that one.

*** Volume control

This is done with =pamixer=, whose package has the same name.

*** Bluetooth

I usually only use bluetooth with my headphones on my laptop. The
bluetooth headset article from the arch wiki is pretty much enough for
setting it up. I'll just go over the caveats here

** Polybar

It can be a pain to set up polybar with this repo. Get =cantarell-fonts=
from the official repositories and =ttf-material-design-icons-git= from
the AUR and everthing should work alright

** Symlinks

Should be pretty obvious by looking at the files in this repo with
=ls -la=.

** Some packages

=networkmanager network-manager-applet ranger feh i3 neovim vim lightdm lightdm-gtk-greeter=

I'll mention some of the others later in this document.

** Keyboard backlight

See [[https://wiki.archlinux.org/index.php/Keyboard_backlight][the arch
wiki]]. =kblight.py= is in the =PATH= variable in =.profile= so it
should work out of the box provided that I install =upower= and
=python-dbus= from the official repositories.

** Screen backlight

   I was previously using kernel parameters and setting the screen
   backlight through direct communication with the acpi. It works but
   doesn't play nice with polybar. In order to do that we need to use
   =xbacklight=.

   Usually we should have =xorg-xbacklight= installed but if that's
   not the case, just grab it from the official repositories.

   Then append or create this into =/etc/X11/xorg.conf=:

#+BEGIN_SRC
Section "Device"
    Identifier  "Card0"
    Driver      "intel"
    Option      "Backlight"  "intel_backlight"
EndSection
#+END_SRC

After all this, =XF86= keys and polybar brightness indicator should
work just fine

** Video on laptop

   Video on laptop has been a real pain to handle for me.

   First install these packages

   #+BEGIN_EXAMPLE
   # pacman -S nvidia nvidia-utils lib32-nvidia-utils mesa bumblebee mesa bbswitch lib32-virtualgl
   #+END_EXAMPLE

   Add myself to the =bumblebee= group:

   #+BEGIN_EXAMPLE
   # gpasswd -a nsalas bumblebee
   #+END_EXAMPLE

   Enable the bumblebee service

   #+BEGIN_EXAMPLE
   # systemctl enable bumblebeed.service
   #+END_EXAMPLE

   That should normally work, but my laptop being somewhat of a
   nightmare, it doesn't suffice. Add this to kernel parameters:

   #+BEGIN_EXAMPLE
   pcie_port_pm=off
   #+END_EXAMPLE

   That will disable the annoying =pcieport= messages from the kernel
   and according to the ASUS laptop page on Arch Linux that line *is
   required* to make =bbswitch= work.

   However, that doesn't really make it all good yet. After waking
   from suspend, =optirun= will not work. For that to work again we
   have to issue this command *every time we wake up the laptop*

   #+BEGIN_EXAMPLE
   $ echo 1 > /sys/bus/pci/rescan
   #+END_EXAMPLE

   It might need =sudo= privileges, don't remember. Thing is if you
   need to do that use =bash -c "..."= instead of just sudoing that
   last command.

   That should be it.

   On a last note: it's very possible that the graphics card is *OFF*
   after waking from sleep even though issuing =cat
   /proc/acpi/bbswitch= could say it's on. I'm not sure though, but
   the battery life is higher when using that instead of jut =nouveau=.

** WM

=i3wm= with =i3-gaps=. Bar on top is =polybar=, network is ran by
=NetworkManager=.

** Launcher

I considered [[https://github.com/DaveDavenport/rofi][rofi]] at first
and it worked great. In fact I still have it bound in my i3 config. I've
recently discovered [[https://albertlauncher.github.io/][albert]], which
has many plugins and most of all, solves my search problem, so i'll be
using that instead.

** Neovim

I'm using neovim this time. More on this later

** Ranger

Ranger should work pretty well with =neovim=, =zathura= and =feh=. It
requires =zsh= to be installed if you use the =S= key.

** Music

=spotify=(AUR) with =playerctl=.

** Mail auth and related

We'll be handling key stuff with =gnupg= and =PAM= with this
[[https://github.com/cruegge/pam-gnupg][very nice package]].

If you (I) haven't yet created a public-private key pair, then do so:

#+BEGIN_EXAMPLE
$ gpg --full-gen-key
#+END_EXAMPLE

RSA and RSA with 2048 is fine. Expiration time really depends on the
use you make of your key. Indefinite time is okay for me. *Remember to
insert a /real/ email* as you'll be using it later.

Once the pair is created:

1. Install =pam-gnupg-git= from the AUR (here we use =yay=).
2. Put your plaintext password in a file to encrypt it
3. Encrypt it using =gpg= for yourself.
4. Shred the file so that there is no trace of your plaintext password.

#+BEGIN_EXAMPLE
    $ yay -S pam-gnupg-git
    $ echo YOURPASSWORD > ~/.mailpass
    $ gpg -r YOURKEYS@E.MAIL --encrypt ~/.mailpass
    $ shred -u ~/.mailpass
#+END_EXAMPLE

Then edit =/etc/pam.d/lightdm= and add:

#+BEGIN_EXAMPLE
    auth     optional  pam_gnupg.so
    session  optional  pam_gnupg.so
#+END_EXAMPLE

At the end of the file. This only if you're using =lightdm=.

Then for your screen lock (mine in =/etc/pam.d/i3lock=):

#+BEGIN_EXAMPLE
    auth     optional  pam_gnupg.so
#+END_EXAMPLE

For ubiquitous availability, create =~/.gnupg/gpg-agent.conf= if it
doesn't exist and add the line (again, if it doesn't exist)

#+BEGIN_EXAMPLE
    allow-preset-passphrase
    max-cache-ttl 34560000
#+END_EXAMPLE

The =max-cache-ttl= value is for one year, which pretty much means your
key should be cached for the entirety of your session.

Finally, tell which keys you want =pam-gnupg= to cache by creating the
file =~/.pam-gnupg= and adding the keygrip.

Look the keygrip by running the following:

#+BEGIN_EXAMPLE
    gpg -K --with-keygrip
#+END_EXAMPLE

As far as I know, it suffices to take the one with the =[E]= flag.

** External drives

External drives are automounted with
[[https://github.com/coldfix/udiskie][udiskie]], files can then be
browsed with [[https://github.com/ranger/ranger][ranger]] in
=/run/media/$USER=.

#+BEGIN_EXAMPLE
    $ pacman -S udiskie
#+END_EXAMPLE

Then it's enough to add an entry to the =i3/config= file like so:

#+BEGIN_EXAMPLE
    exec --no-startup-id udiskie --smart-tray
#+END_EXAMPLE

The =--smart-tray= option will make it not show on the tray if there's
nothing plugged.

We can then browse =/run/media/= for mounted drives and use the tray
application to eject them.

** MIME

By default, regular =i3= doesn't add anything to the =xdg-mime=
database. This makes it so that if you open, say, a directory, from
within =chromium= or with =albert=, They don't open with the right
application. To set all the applications we can run:

#+BEGIN_EXAMPLE
    $ xdg-mime default ranger.desktop inode/directory
    $ xdg-mime default org.pwmt.zathura.desktop application/pdf
    $ xdg-mime default transmission-remote-magnet.desktop x-scheme-handler/magnet
#+END_EXAMPLE

Note that processes that have already picked up the database won't
notice these changes. You might need to restart them. Most crucial
example here is Albert.

*** A word on magnet links
    :PROPERTIES:
    :CUSTOM_ID: a-word-on-magnet-links
    :END:

Magnet is a little bit complicated on torrents because we're running a
daemon on the background which handles all magnet links
(=transmission-daemon= provided by the =transmission-cli= package). We
need to create a desktop file which can redirect magnet links to
=transmission-remote= in order to add magnet links. For this to work we
only require that =~/dotfiles/bin/= is in the path and symbolic or hard
links to the =.config= and =.local= folders are created. It works very
well when =transmission-daemon= is already running, but behavior might
be unexpected when that's not running.

** Git caching

Caching is a bit of a pain in the ass when it comes to ssh keys. This is
what I expect to happen with this:

1. I want to have my private ssh key encrypted on disk
2. I want to /only/ enter my password one time
3. Value should remain cached for at least 2 hours.

There are two scenarios where I want this to happen:

1. zsh
2. Magit

The setup described below allows me to share cached ssh keys between
those two.

*** For =zsh=

There are instructions in the Arch Wiki for this
[[https://wiki.archlinux.org/index.php/SSH_keys#SSH_agents][here]], but
they are a little convoluted, so here's how to do it.

First, spawn *one* and only one =ssh-agent= when the WM/DE is started.
The following is in my =.profile=:

#+BEGIN_SRC sh
    if ! pgrep -u "$USER" ssh-agent > /dev/null; then
        ssh-agent > ~/.ssh-agent-thing
    fi
    if [[ "$SSH_AGENT_PID" == "" ]]; then
        eval "$(<~/.ssh-agent-thing)"
    fi
#+END_SRC

Next we need to tell =ssh-agent= that we want to cache our password, but
this is tricky. I don't want to unlock my password at the start of the
session. Instead, I'd like it to be cached from the moment I enter it
for the first time onwards. This can be achieved by adding the following
line to =~/.ssh/config=:

#+BEGIN_EXAMPLE
    AddKeysToAgent yes
#+END_EXAMPLE

That would be it for shell. Still need a way to figure out the time
caching, but this solves my most urgent problem for now.

*** For =magit=

Oh boy, was this one hard to tackle.

All we ever need is =exec-path-from-shell= package and to get the
variables set by the ssh onto the shell into emacs. That's done via
these lines:

#+BEGIN_SRC emacs-lisp
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+END_SRC

This works *as long as the =ssh-agent= process was started by a parent
of the current emacs process*. In my case, that would be =i3=, which
executed albert, which is how I usually open emacs.
